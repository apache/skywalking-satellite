// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package plugin

import (
	"fmt"
	"reflect"
	"strings"
)

// NameField is a required field in Config.
const NameField = "plugin_name"
const PluginDir = "plugins"

// Plugin defines the plugin model in Satellite.
type Plugin interface {
	// Name returns the name of the specific plugin.
	Name() string
	// Description returns the description of the specific plugin.
	Description() string
	// Config returns the default config, that is a YAML pattern.
	DefaultConfig() string
}

// SharingPlugin the plugins cloud be sharing with different modules in different namespaces.
type SharingPlugin interface {
	Plugin

	// Prepare the sharing plugins, such as build the connection with the external services.
	Prepare() error
	// Start a server to receive the input APM data.
	Start() error
	// Close the sharing plugin.
	Close() error
}

// Config is used to initialize the DefaultInitializingPlugin.
type Config map[string]interface{}

// GetPluginName returns a plugin name generated by the packages.
// Recommended plugin directory structure: plugins/{plugin-category}/{plugin-name}, so the generated names is {plugin-name}-{plugin-category}.
func GetPluginName(p Plugin) string {
	t := reflect.TypeOf(p)
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	path := t.PkgPath()
	path = path[strings.LastIndex(path, PluginDir)+len(PluginDir)+1:]
	arr := strings.Split(path, "/")
	if len(arr) > 1 {
		category := arr[0]
		return strings.Join(arr[1:], "-") + "-" + category
	}
	panic(fmt.Errorf("the plugin pkg name is not legal: %s", t.PkgPath()))
}
